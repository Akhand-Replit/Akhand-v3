import streamlit as st
import pandas as pd
from utils.database import Database
from utils.styling import apply_custom_styling
import logging
from collections import defaultdict

logger = logging.getLogger(__name__)
apply_custom_styling()

def display_relationship_card(record):
    # Create a flex container for name and photo
    photo_html = f"""<img src="{record.get('photo_link', '')}" 
                     style="width: 100px; height: 100px; object-fit: cover; border-radius: 50%; margin-right: 1rem;"
                     onerror="this.style.display='none'"
                     alt="{record['‡¶®‡¶æ‡¶Æ']} ‡¶è‡¶∞ ‡¶õ‡¶¨‡¶ø">""" if record.get('photo_link') else ""

    st.markdown(f"""
    <div style='background: white; padding: 1rem; border-radius: 0.5rem; margin-bottom: 0.5rem; box-shadow: 0 1px 3px rgba(0,0,0,0.1);'>
        <div style='display: flex; align-items: center; margin-bottom: 1rem;'>
            {photo_html}
            <h3 style='margin: 0;'>{record['‡¶®‡¶æ‡¶Æ']}</h3>
        </div>
        <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;'>
            <div>
                <p><strong>‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï ‡¶®‡¶Ç:</strong> {record['‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç']}</p>
                <p><strong>‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶Ç:</strong> {record['‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç']}</p>
                <p><strong>‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ:</strong> {record['‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ']}</p>
                <p><strong>‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ:</strong> {record['‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ']}</p>
                <p><strong>‡¶™‡ßá‡¶∂‡¶æ:</strong> {record['‡¶™‡ßá‡¶∂‡¶æ']}</p>
                <p><strong>‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ:</strong> {record['‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ']}</p>
            </div>
            <div>
                <p><strong>‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞:</strong> {record.get('phone_number', '')}</p>
                <p><strong>‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï:</strong> <a href="{record.get('facebook_link', '#')}" target="_blank">{record.get('facebook_link', '')}</a></p>
                <p><strong>‡¶¨‡¶ø‡¶¨‡¶∞‡¶£:</strong> {record.get('description', '')}</p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

def relationships_page():
    if 'authenticated' not in st.session_state or not st.session_state.authenticated:
        st.warning("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®")
        return

    st.title("üë• ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ ‡¶è‡¶¨‡¶Ç ‡¶∂‡¶§‡ßç‡¶∞‡ßÅ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ")

    db = Database()

    # Get all batches
    batches = db.get_all_batches()

    if not batches:
        st.info("‡¶ï‡ßã‡¶® ‡¶°‡¶æ‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
        return

    # Batch selection
    selected_batch = st.selectbox(
        "‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
        options=['‡¶∏‡¶¨ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö'] + [batch['name'] for batch in batches],
        format_func=lambda x: f"‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö: {x}"
    )

    # Create tabs for Friend, Enemy and Connected lists
    tab1, tab2, tab3 = st.tabs(["‡¶¨‡¶®‡ßç‡¶ß‡ßÅ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ", "‡¶∂‡¶§‡ßç‡¶∞‡ßÅ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ", "‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ"])

    def display_relationship_section(relationship_type):
        # Get records based on selection
        if selected_batch == '‡¶∏‡¶¨ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö':
            records = db.get_relationship_records(relationship_type)
        else:
            # Get batch ID
            batch_id = next(batch['id'] for batch in batches if batch['name'] == selected_batch)
            records = [r for r in db.get_relationship_records(relationship_type) 
                      if r['batch_id'] == batch_id]

        if not records:
            st.info(f"‡¶ï‡ßã‡¶® {'‡¶¨‡¶®‡ßç‡¶ß‡ßÅ' if relationship_type == 'Friend' else '‡¶∂‡¶§‡ßç‡¶∞‡ßÅ' if relationship_type == 'Enemy' else '‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø'} ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø")
            return

        # Show total count
        st.write(f"‡¶Æ‡ßã‡¶ü: {len(records)}")

        # Group records by batch and file
        batch_file_groups = defaultdict(lambda: defaultdict(list))
        for record in records:
            batch_file_groups[record['batch_name']][record['file_name']].append(record)

        # Display in folder structure without nested expanders
        for batch_name in sorted(batch_file_groups.keys()):
            st.markdown(f"### üìÅ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö: {batch_name}")
            files = batch_file_groups[batch_name]

            for file_name in sorted(files.keys()):
                st.markdown(f"#### üìÑ ‡¶´‡¶æ‡¶á‡¶≤: {file_name}")
                records = files[file_name]

                # Add a visual separator
                st.markdown("""<hr style="margin: 0.5rem 0; border: none; border-top: 1px solid #eee;">""", unsafe_allow_html=True)

                for record in records:
                    display_relationship_card(record)
                    if st.button(
                        "üîÑ Regular ‡¶è ‡¶´‡¶ø‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶®‡¶ø‡¶®", 
                        key=f"remove_{relationship_type}_{record['id']}", 
                        type="secondary",
                        use_container_width=True
                    ):
                        db.update_relationship_status(record['id'], 'Regular')
                        st.success("‚úÖ Regular ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
                        st.rerun()

                # Add spacing between files
                st.markdown("<br>", unsafe_allow_html=True)

    with tab1:
        st.subheader("ü§ù ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ")
        display_relationship_section('Friend')

    with tab2:
        st.subheader("‚öîÔ∏è ‡¶∂‡¶§‡ßç‡¶∞‡ßÅ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ")
        display_relationship_section('Enemy')

    with tab3:
        st.subheader("üîó ‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ")
        display_relationship_section('Connected')

if __name__ == "__main__":
    relationships_page()