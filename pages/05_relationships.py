import streamlit as st
import pandas as pd
from utils.database import Database
from utils.styling import apply_custom_styling
import logging
from collections import defaultdict

logger = logging.getLogger(__name__)
apply_custom_styling()

def display_relationship_card(record):
    # Create a card container with proper styling
    st.markdown(f"""
    <div style='background: white; padding: 1.5rem; border-radius: 0.5rem; margin-bottom: 1rem; box-shadow: 0 2px 4px rgba(0,0,0,0.1);'>
        <div style='margin-bottom: 1rem;'>
            <h3 style='margin: 0; color: #1f2937;'>{record['ржирж╛ржо']}</h3>
        </div>
        <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;'>
            <div>
                <p><strong>ржХрзНрж░ржорж┐ржХ ржиржВ:</strong> {record.get('ржХрзНрж░ржорж┐ржХ_ржиржВ', '')}</p>
                <p><strong>рж░рзЗржХрж░рзНржб ржиржВ:</strong> {record.get('ржнрзЛржЯрж╛рж░_ржиржВ', '')}</p>
                <p><strong>ржкрж┐рждрж╛рж░ ржирж╛ржо:</strong> {record.get('ржкрж┐рждрж╛рж░_ржирж╛ржо', '')}</p>
                <p><strong>ржорж╛рждрж╛рж░ ржирж╛ржо:</strong> {record.get('ржорж╛рждрж╛рж░_ржирж╛ржо', '')}</p>
                <p><strong>ржкрзЗрж╢рж╛:</strong> {record.get('ржкрзЗрж╢рж╛', '')}</p>
                <p><strong>ржарж┐ржХрж╛ржирж╛:</strong> {record.get('ржарж┐ржХрж╛ржирж╛', '')}</p>
            </div>
            <div>
                <p><strong>ржлрзЛржи ржиржорзНржмрж░:</strong> {record.get('phone_number', '')}</p>
                <p><strong>ржлрзЗрж╕ржмрзБржХ:</strong> {record.get('facebook_link') and f'<a href="{record["facebook_link"]}" target="_blank">{record["facebook_link"]}</a>' or ''}</p>
                <p><strong>ржмрж┐ржмрж░ржг:</strong> {record.get('description', '')}</p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # Add action button below the card
    if st.button(
        "ЁЯФД Regular ржП ржлрж┐рж░рж┐ржпрж╝рзЗ ржирж┐ржи", 
        key=f"remove_{record['id']}", 
        type="secondary",
        use_container_width=True
    ):
        db = Database()
        db.update_relationship_status(record['id'], 'Regular')
        st.success("тЬЕ Regular рж╣рж┐рж╕рзЗржмрзЗ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!")
        st.rerun()

def relationships_page():
    if 'authenticated' not in st.session_state or not st.session_state.authenticated:
        st.warning("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзНрж░ржержорзЗ рж▓ржЧржЗржи ржХрж░рзБржи")
        return

    st.title("ЁЯСе ржмржирзНржзрзБ ржПржмржВ рж╢рждрзНрж░рзБ рждрж╛рж▓рж┐ржХрж╛")

    db = Database()

    # Get all batches
    batches = db.get_all_batches()

    if not batches:
        st.info("ржХрзЛржи ржбрж╛ржЯрж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐")
        return

    # Batch selection
    selected_batch = st.selectbox(
        "ржмрзНржпрж╛ржЪ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
        options=['рж╕ржм ржмрзНржпрж╛ржЪ'] + [batch['name'] for batch in batches],
        format_func=lambda x: f"ржмрзНржпрж╛ржЪ: {x}"
    )

    # Create tabs for Friend, Enemy and Connected lists
    tab1, tab2, tab3 = st.tabs(["ржмржирзНржзрзБ рждрж╛рж▓рж┐ржХрж╛", "рж╢рждрзНрж░рзБ рждрж╛рж▓рж┐ржХрж╛", "рж╕ржВржпрзБржХрзНржд рждрж╛рж▓рж┐ржХрж╛"])

    def display_relationship_section(relationship_type):
        # Get records based on selection
        if selected_batch == 'рж╕ржм ржмрзНржпрж╛ржЪ':
            records = db.get_relationship_records(relationship_type)
        else:
            batch_id = next(batch['id'] for batch in batches if batch['name'] == selected_batch)
            records = [r for r in db.get_relationship_records(relationship_type) 
                      if r['batch_id'] == batch_id]

        if not records:
            st.info(f"ржХрзЛржи {'ржмржирзНржзрзБ' if relationship_type == 'Friend' else 'рж╢рждрзНрж░рзБ' if relationship_type == 'Enemy' else 'рж╕ржВржпрзБржХрзНржд ржмрзНржпржХрзНрждрж┐'} ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝ржирж┐")
            return

        # Show total count
        st.write(f"ржорзЛржЯ: {len(records)}")

        # Group records by batch and file
        for record in records:
            display_relationship_card(record)

    with tab1:
        st.subheader("ЁЯдЭ ржмржирзНржзрзБ рждрж╛рж▓рж┐ржХрж╛")
        display_relationship_section('Friend')

    with tab2:
        st.subheader("тЪФя╕П рж╢рждрзНрж░рзБ рждрж╛рж▓рж┐ржХрж╛")
        display_relationship_section('Enemy')

    with tab3:
        st.subheader("ЁЯФЧ рж╕ржВржпрзБржХрзНржд рждрж╛рж▓рж┐ржХрж╛")
        display_relationship_section('Connected')

if __name__ == "__main__":
    relationships_page()