import streamlit as st
import pandas as pd
import numpy as np
from utils.database import Database
from utils.styling import apply_custom_styling
import logging

logger = logging.getLogger(__name__)
apply_custom_styling()

def all_data_page():
    if 'authenticated' not in st.session_state or not st.session_state.authenticated:
        st.warning("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзНрж░ржержорзЗ рж▓ржЧржЗржи ржХрж░рзБржи")
        return

    st.title("ЁЯУБ рж╕ржм рждржерзНржп")

    db = Database()

    # Get all batches
    batches = db.get_all_batches()

    if not batches:
        st.info("ржХрзЛржи ржбрж╛ржЯрж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐")
        return

    # Clear all data button with confirmation (moved from sidebar to main page)
    col1, col2 = st.columns([5, 1])
    with col2:
        if st.button("рж╕ржм ржбрж╛ржЯрж╛ ржорзБржЫрзБржи", type="secondary"):
            confirm = st.checkbox("ржЖржкржирж┐ ржХрж┐ ржирж┐рж╢рзНржЪрж┐ржд? ржПржЗ ржХрж╛ржЬржЯрж┐ ржЕржкрж░рж┐ржмрж░рзНрждржирзАржпрж╝!")
            if confirm:
                try:
                    db.clear_all_data()
                    st.success("рж╕ржм ржбрж╛ржЯрж╛ рж╕ржлрж▓ржнрж╛ржмрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ")
                    st.rerun()
                except Exception as e:
                    logger.error(f"Clear data error: {str(e)}")
                    st.error(f"ржбрж╛ржЯрж╛ ржорзБржЫрждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ: {str(e)}")

    # Batch selection
    with col1:
        selected_batch = st.selectbox(
            "ржмрзНржпрж╛ржЪ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
            options=[batch['name'] for batch in batches],
            format_func=lambda x: f"ржмрзНржпрж╛ржЪ: {x}"
        )

    # Get selected batch details
    selected_batch_id = next(batch['id'] for batch in batches if batch['name'] == selected_batch)

    # Get files for selected batch
    files = db.get_batch_files(selected_batch_id)

    if files:
        selected_file = st.selectbox(
            "ржлрж╛ржЗрж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
            options=['рж╕ржм'] + [file['file_name'] for file in files],
            format_func=lambda x: f"ржлрж╛ржЗрж▓: {x}" if x != 'рж╕ржм' else "рж╕ржм ржлрж╛ржЗрж▓ ржжрзЗржЦрзБржи"
        )

        # Get records based on selection
        if selected_file == 'рж╕ржм':
            records = db.get_batch_records(selected_batch_id)
        else:
            records = db.get_file_records(selected_batch_id, selected_file)

        if records:
            # Convert records to DataFrame
            df = pd.DataFrame(records)

            # Show total count
            st.write(f"ржорзЛржЯ рж░рзЗржХрж░рзНржб: {len(records)}")

            # Create editable dataframe
            edited_df = st.data_editor(
                df[[
                    'ржХрзНрж░ржорж┐ржХ_ржиржВ', 'ржирж╛ржо', 'ржнрзЛржЯрж╛рж░_ржиржВ', 'ржкрж┐рждрж╛рж░_ржирж╛ржо',
                    'ржорж╛рждрж╛рж░_ржирж╛ржо', 'ржкрзЗрж╢рж╛', 'ржарж┐ржХрж╛ржирж╛', 'ржЬржирзНржо_рждрж╛рж░рж┐ржЦ'
                ]],
                column_config={
                    'ржХрзНрж░ржорж┐ржХ_ржиржВ': st.column_config.TextColumn('ржХрзНрж░ржорж┐ржХ ржиржВ'),
                    'ржирж╛ржо': st.column_config.TextColumn('ржирж╛ржо'),
                    'ржнрзЛржЯрж╛рж░_ржиржВ': st.column_config.TextColumn('ржнрзЛржЯрж╛рж░ ржиржВ'),
                    'ржкрж┐рждрж╛рж░_ржирж╛ржо': st.column_config.TextColumn('ржкрж┐рждрж╛рж░ ржирж╛ржо'),
                    'ржорж╛рждрж╛рж░_ржирж╛ржо': st.column_config.TextColumn('ржорж╛рждрж╛рж░ ржирж╛ржо'),
                    'ржкрзЗрж╢рж╛': st.column_config.TextColumn('ржкрзЗрж╢рж╛'),
                    'ржарж┐ржХрж╛ржирж╛': st.column_config.TextColumn('ржарж┐ржХрж╛ржирж╛'),
                    'ржЬржирзНржо_рждрж╛рж░рж┐ржЦ': st.column_config.TextColumn('ржЬржирзНржо рждрж╛рж░рж┐ржЦ')
                },
                hide_index=True,
                use_container_width=True,
                key="data_editor"
            )

            # Update button
            if st.button("ржкрж░рж┐ржмрж░рзНрждржиржЧрзБрж▓рж┐ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи", type="primary"):
                try:
                    # Compare and update changed records
                    changes = edited_df.compare(df[[
                        'ржХрзНрж░ржорж┐ржХ_ржиржВ', 'ржирж╛ржо', 'ржнрзЛржЯрж╛рж░_ржиржВ', 'ржкрж┐рждрж╛рж░_ржирж╛ржо',
                        'ржорж╛рждрж╛рж░_ржирж╛ржо', 'ржкрзЗрж╢рж╛', 'ржарж┐ржХрж╛ржирж╛', 'ржЬржирзНржо_рждрж╛рж░рж┐ржЦ'
                    ]])

                    if not changes.empty:
                        for idx in changes.index:
                            record_id = int(df.iloc[idx]['id'])  # Convert to native Python int
                            # Convert DataFrame row to dictionary with proper type conversion
                            row_data = edited_df.iloc[idx]
                            updated_data = {
                                'ржХрзНрж░ржорж┐ржХ_ржиржВ': str(row_data['ржХрзНрж░ржорж┐ржХ_ржиржВ']) if pd.notnull(row_data['ржХрзНрж░ржорж┐ржХ_ржиржВ']) else '',
                                'ржирж╛ржо': str(row_data['ржирж╛ржо']) if pd.notnull(row_data['ржирж╛ржо']) else '',
                                'ржнрзЛржЯрж╛рж░_ржиржВ': str(row_data['ржнрзЛржЯрж╛рж░_ржиржВ']) if pd.notnull(row_data['ржнрзЛржЯрж╛рж░_ржиржВ']) else '',
                                'ржкрж┐рждрж╛рж░_ржирж╛ржо': str(row_data['ржкрж┐рждрж╛рж░_ржирж╛ржо']) if pd.notnull(row_data['ржкрж┐рждрж╛рж░_ржирж╛ржо']) else '',
                                'ржорж╛рждрж╛рж░_ржирж╛ржо': str(row_data['ржорж╛рждрж╛рж░_ржирж╛ржо']) if pd.notnull(row_data['ржорж╛рждрж╛рж░_ржирж╛ржо']) else '',
                                'ржкрзЗрж╢рж╛': str(row_data['ржкрзЗрж╢рж╛']) if pd.notnull(row_data['ржкрзЗрж╢рж╛']) else '',
                                'ржарж┐ржХрж╛ржирж╛': str(row_data['ржарж┐ржХрж╛ржирж╛']) if pd.notnull(row_data['ржарж┐ржХрж╛ржирж╛']) else '',
                                'ржЬржирзНржо_рждрж╛рж░рж┐ржЦ': str(row_data['ржЬржирзНржо_рждрж╛рж░рж┐ржЦ']) if pd.notnull(row_data['ржЬржирзНржо_рждрж╛рж░рж┐ржЦ']) else ''
                            }
                            db.update_record(record_id, updated_data)

                        st.success("ржкрж░рж┐ржмрж░рзНрждржиржЧрзБрж▓рж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕ржВрж░ржХрзНрж╖рж┐ржд рж╣ржпрж╝рзЗржЫрзЗ!")
                        st.rerun()
                except Exception as e:
                    logger.error(f"Update error: {str(e)}")
                    st.error(f"ржкрж░рж┐ржмрж░рзНрждржи рж╕ржВрж░ржХрзНрж╖ржгрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ: {str(e)}")
        else:
            st.info("ржХрзЛржи рж░рзЗржХрж░рзНржб ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐")
    else:
        st.info("ржПржЗ ржмрзНржпрж╛ржЪрзЗ ржХрзЛржи ржлрж╛ржЗрж▓ ржирзЗржЗ")

if __name__ == "__main__":
    all_data_page()