import streamlit as st
import pandas as pd
from utils.database import Database
from utils.styling import apply_custom_styling
import logging

logger = logging.getLogger(__name__)
apply_custom_styling()

def all_data_page():
    if 'authenticated' not in st.session_state or not st.session_state.authenticated:
        st.warning("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®")
        return

    st.title("üìÅ ‡¶∏‡¶¨ ‡¶§‡¶•‡ßç‡¶Ø")

    db = Database()

    # Get all batches
    batches = db.get_all_batches()

    if not batches:
        st.info("‡¶ï‡ßã‡¶® ‡¶°‡¶æ‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
        return

    # Clear all data button with confirmation (moved from sidebar to main page)
    col1, col2 = st.columns([5, 1])
    with col2:
        if st.button("‡¶∏‡¶¨ ‡¶°‡¶æ‡¶ü‡¶æ ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®", type="secondary"):
            confirm = st.checkbox("‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§? ‡¶è‡¶á ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡ßÄ‡¶Ø‡¶º!")
            if confirm:
                try:
                    db.clear_all_data()
                    st.success("‡¶∏‡¶¨ ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
                    st.rerun()
                except Exception as e:
                    logger.error(f"Clear data error: {str(e)}")
                    st.error(f"‡¶°‡¶æ‡¶ü‡¶æ ‡¶Æ‡ßÅ‡¶õ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {str(e)}")

    # Batch selection
    with col1:
        selected_batch = st.selectbox(
            "‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
            options=[batch['name'] for batch in batches],
            format_func=lambda x: f"‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö: {x}"
        )

    # Get selected batch details
    selected_batch_id = next(batch['id'] for batch in batches if batch['name'] == selected_batch)

    # Get files for selected batch
    files = db.get_batch_files(selected_batch_id)

    if files:
        selected_file = st.selectbox(
            "‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
            options=['‡¶∏‡¶¨'] + [file['file_name'] for file in files],
            format_func=lambda x: f"‡¶´‡¶æ‡¶á‡¶≤: {x}" if x != '‡¶∏‡¶¨' else "‡¶∏‡¶¨ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®"
        )

        # Get records based on selection
        if selected_file == '‡¶∏‡¶¨':
            records = db.get_batch_records(selected_batch_id)
        else:
            records = db.get_file_records(selected_batch_id, selected_file)

        if records:
            # Convert records to DataFrame
            df = pd.DataFrame(records)

            # Show total count
            st.write(f"‡¶Æ‡ßã‡¶ü ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°: {len(records)}")

            # Create editable dataframe
            edited_df = st.data_editor(
                df[[
                    '‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç', '‡¶®‡¶æ‡¶Æ', '‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç', '‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ',
                    '‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ', '‡¶™‡ßá‡¶∂‡¶æ', '‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ', '‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ'
                ]],
                column_config={
                    '‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç': st.column_config.TextColumn('‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï ‡¶®‡¶Ç'),
                    '‡¶®‡¶æ‡¶Æ': st.column_config.TextColumn('‡¶®‡¶æ‡¶Æ'),
                    '‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç': st.column_config.TextColumn('‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶Ç'),
                    '‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ': st.column_config.TextColumn('‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ'),
                    '‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ': st.column_config.TextColumn('‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ'),
                    '‡¶™‡ßá‡¶∂‡¶æ': st.column_config.TextColumn('‡¶™‡ßá‡¶∂‡¶æ'),
                    '‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ': st.column_config.TextColumn('‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ'),
                    '‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ': st.column_config.TextColumn('‡¶ú‡¶®‡ßç‡¶Æ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ')
                },
                hide_index=True,
                use_container_width=True,
                key="data_editor"
            )

            # Update button
            if st.button("‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®", type="primary"):
                try:
                    # Compare and update changed records
                    changes = edited_df.compare(df[[
                        '‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç', '‡¶®‡¶æ‡¶Æ', '‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç', '‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ',
                        '‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ', '‡¶™‡ßá‡¶∂‡¶æ', '‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ', '‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ'
                    ]])

                    if not changes.empty:
                        for idx in changes.index:
                            record_id = df.iloc[idx]['id']
                            # Convert to dictionary and ensure string types
                            updated_data = {
                                k: str(v) if pd.notnull(v) else None 
                                for k, v in edited_df.iloc[idx].to_dict().items()
                            }
                            db.update_record(record_id, updated_data)

                        st.success("‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
                        st.rerun()
                except Exception as e:
                    logger.error(f"Update error: {str(e)}")
                    st.error(f"‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {str(e)}")
        else:
            st.info("‡¶ï‡ßã‡¶® ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
    else:
        st.info("‡¶è‡¶á ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö‡ßá ‡¶ï‡ßã‡¶® ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡ßá‡¶á")

if __name__ == "__main__":
    all_data_page()