import streamlit as st
import pandas as pd
from utils.database import Database
from utils.styling import apply_custom_styling
import logging

logger = logging.getLogger(__name__)
apply_custom_styling()

def all_data_page():
    if 'authenticated' not in st.session_state or not st.session_state.authenticated:
        st.warning("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзНрж░ржержорзЗ рж▓ржЧржЗржи ржХрж░рзБржи")
        return

    st.title("ЁЯУБ рж╕ржм рждржерзНржп")

    db = Database()

    # Clear all data button with confirmation
    if st.sidebar.button("рж╕ржм ржбрж╛ржЯрж╛ ржорзБржЫрзЗ ржлрзЗрж▓рзБржи", type="secondary"):
        if st.sidebar.checkbox("ржЖржкржирж┐ ржХрж┐ ржирж┐рж╢рзНржЪрж┐ржд? ржПржЗ ржХрж╛ржЬржЯрж┐ ржЕржкрж░рж┐ржмрж░рзНрждржирзАржпрж╝!"):
            try:
                db.clear_all_data()
                st.sidebar.success("рж╕ржм ржбрж╛ржЯрж╛ рж╕ржлрж▓ржнрж╛ржмрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ")
                st.rerun()
            except Exception as e:
                logger.error(f"Clear data error: {str(e)}")
                st.sidebar.error(f"ржбрж╛ржЯрж╛ ржорзБржЫрждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ: {str(e)}")

    # Get all batches
    batches = db.get_all_batches()

    if not batches:
        st.info("ржХрзЛржи ржбрж╛ржЯрж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐")
        return

    # Batch selection
    selected_batch = st.selectbox(
        "ржмрзНржпрж╛ржЪ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
        options=[batch['name'] for batch in batches],
        format_func=lambda x: f"ржмрзНржпрж╛ржЪ: {x}"
    )

    # Get selected batch details
    selected_batch_id = next(batch['id'] for batch in batches if batch['name'] == selected_batch)

    # Get files for selected batch
    files = db.get_batch_files(selected_batch_id)

    if files:
        selected_file = st.selectbox(
            "ржлрж╛ржЗрж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
            options=['рж╕ржм'] + [file['file_name'] for file in files],
            format_func=lambda x: f"ржлрж╛ржЗрж▓: {x}" if x != 'рж╕ржм' else "рж╕ржм ржлрж╛ржЗрж▓ ржжрзЗржЦрзБржи"
        )

        # Get records based on selection
        if selected_file == 'рж╕ржм':
            records = db.get_batch_records(selected_batch_id)
        else:
            records = db.get_file_records(selected_batch_id, selected_file)

        if records:
            # Convert records to DataFrame
            df = pd.DataFrame(records)

            # Reorder and rename columns for display
            display_columns = [
                'ржХрзНрж░ржорж┐ржХ_ржиржВ', 'ржирж╛ржо', 'ржнрзЛржЯрж╛рж░_ржиржВ', 'ржкрж┐рждрж╛рж░_ржирж╛ржо', 
                'ржорж╛рждрж╛рж░_ржирж╛ржо', 'ржкрзЗрж╢рж╛', 'ржарж┐ржХрж╛ржирж╛', 'ржЬржирзНржо_рждрж╛рж░рж┐ржЦ',
                'file_name'
            ]

            column_names = {
                'ржХрзНрж░ржорж┐ржХ_ржиржВ': 'ржХрзНрж░ржорж┐ржХ ржиржВ',
                'ржирж╛ржо': 'ржирж╛ржо',
                'ржнрзЛржЯрж╛рж░_ржиржВ': 'ржнрзЛржЯрж╛рж░ ржиржВ',
                'ржкрж┐рждрж╛рж░_ржирж╛ржо': 'ржкрж┐рждрж╛рж░ ржирж╛ржо',
                'ржорж╛рждрж╛рж░_ржирж╛ржо': 'ржорж╛рждрж╛рж░ ржирж╛ржо',
                'ржкрзЗрж╢рж╛': 'ржкрзЗрж╢рж╛',
                'ржарж┐ржХрж╛ржирж╛': 'ржарж┐ржХрж╛ржирж╛',
                'ржЬржирзНржо_рждрж╛рж░рж┐ржЦ': 'ржЬржирзНржо рждрж╛рж░рж┐ржЦ',
                'file_name': 'ржлрж╛ржЗрж▓'
            }

            df_display = df[display_columns].rename(columns=column_names)

            # Show total count
            st.write(f"ржорзЛржЯ рж░рзЗржХрж░рзНржб: {len(records)}")

            # Display as table with editing capability
            st.dataframe(
                df_display,
                hide_index=True,
                use_container_width=True
            )
        else:
            st.info("ржХрзЛржи рж░рзЗржХрж░рзНржб ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐")
    else:
        st.info("ржПржЗ ржмрзНржпрж╛ржЪрзЗ ржХрзЛржи ржлрж╛ржЗрж▓ ржирзЗржЗ")

if __name__ == "__main__":
    all_data_page()