import streamlit as st
from utils.database import Database
from utils.styling import apply_custom_styling
import logging

logger = logging.getLogger(__name__)
apply_custom_styling()

def search_page():
    if 'authenticated' not in st.session_state or not st.session_state.authenticated:
        st.warning("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®")
        return

    st.title("üîç ‡¶§‡¶•‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®")

    db = Database()

    # Advanced search fields
    with st.container():
        col1, col2 = st.columns(2)

        with col1:
            si_number = st.text_input("‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï ‡¶®‡¶Ç")
            name = st.text_input("‡¶®‡¶æ‡¶Æ")
            fathers_name = st.text_input("‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ")
            mothers_name = st.text_input("‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ")

        with col2:
            occupation = st.text_input("‡¶™‡ßá‡¶∂‡¶æ")
            address = st.text_input("‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ")
            date_of_birth = st.text_input("‡¶ú‡¶®‡ßç‡¶Æ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ")

    # Search buttons
    col3, col4 = st.columns([4, 1])
    with col3:
        search_button = st.button("‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®", type="primary")
    with col4:
        show_all = st.button("‡¶∏‡¶¨ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®", type="secondary")

    if search_button or show_all:
        try:
            with st.spinner("‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."):
                if search_button:
                    # Create search criteria dictionary
                    search_criteria = {
                        '‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç': si_number,
                        '‡¶®‡¶æ‡¶Æ': name,
                        '‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ': fathers_name,
                        '‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ': mothers_name,
                        '‡¶™‡ßá‡¶∂‡¶æ': occupation,
                        '‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ': address,
                        '‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ': date_of_birth
                    }
                    # Remove empty criteria
                    search_criteria = {k: v for k, v in search_criteria.items() if v}
                    results = db.search_records_advanced(search_criteria)
                else:
                    results = db.get_batch_records(None)  # Get all records

                if results:
                    st.success(f"{len(results)}‡¶ü‡¶ø ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá")

                    for result in results:
                        with st.container():
                            st.markdown(f"""
                            <div style='background: white; padding: 1rem; border-radius: 0.5rem; margin-bottom: 1rem; box-shadow: 0 1px 3px rgba(0,0,0,0.1);'>
                                <h3>{result['‡¶®‡¶æ‡¶Æ']}</h3>
                                <p><strong>‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï ‡¶®‡¶Ç:</strong> {result['‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç']}</p>
                                <p><strong>‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶Ç:</strong> {result['‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç']}</p>
                                <p><strong>‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ:</strong> {result['‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ']}</p>
                                <p><strong>‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ:</strong> {result['‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ']}</p>
                                <p><strong>‡¶™‡ßá‡¶∂‡¶æ:</strong> {result['‡¶™‡ßá‡¶∂‡¶æ']}</p>
                                <p><strong>‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ:</strong> {result['‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ']}</p>
                                <p><strong>‡¶´‡¶æ‡¶á‡¶≤:</strong> {result['batch_name']}/{result['file_name']}</p>
                            </div>
                            """, unsafe_allow_html=True)

                            # Add Friend/Enemy buttons
                            col1, col2 = st.columns(2)
                            with col1:
                                if st.button("ü§ù ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®", key=f"friend_{result['id']}", type="primary"):
                                    db.add_relationship(result['id'], 'friend')
                                    st.success("‡¶¨‡¶®‡ßç‡¶ß‡ßÅ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
                                    st.rerun()
                            with col2:
                                if st.button("‚öîÔ∏è ‡¶∂‡¶§‡ßç‡¶∞‡ßÅ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®", key=f"enemy_{result['id']}", type="secondary"):
                                    db.add_relationship(result['id'], 'enemy')
                                    st.success("‡¶∂‡¶§‡ßç‡¶∞‡ßÅ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
                                    st.rerun()
                else:
                    st.info("‡¶ï‡ßã‡¶® ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")

        except Exception as e:
            logger.error(f"Search error: {str(e)}")
            st.error(f"‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {str(e)}")

if __name__ == "__main__":
    search_page()