import streamlit as st
import pandas as pd
from utils.database import Database
from utils.styling import apply_custom_styling
import logging

logger = logging.getLogger(__name__)
apply_custom_styling()

def search_page():
    if 'authenticated' not in st.session_state or not st.session_state.authenticated:
        st.warning("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзНрж░ржержорзЗ рж▓ржЧржЗржи ржХрж░рзБржи")
        return

    st.title("ЁЯФН рждржерзНржп ржЦрзБржБржЬрзБржи")

    db = Database()

    # Advanced search fields
    with st.container():
        col1, col2 = st.columns(2)

        with col1:
            si_number = st.text_input("ржХрзНрж░ржорж┐ржХ ржиржВ")
            name = st.text_input("ржирж╛ржо")
            fathers_name = st.text_input("ржкрж┐рждрж╛рж░ ржиржВ")
            mothers_name = st.text_input("ржорж╛рждрж╛рж░ ржирж╛ржо")

        with col2:
            occupation = st.text_input("ржкрзЗрж╢рж╛")
            address = st.text_input("ржарж┐ржХрж╛ржирж╛")
            date_of_birth = st.text_input("ржЬржирзНржо рждрж╛рж░рж┐ржЦ")

    # Search buttons
    col3, col4 = st.columns([4, 1])
    with col3:
        search_button = st.button("ржЕржирзБрж╕ржирзНржзрж╛ржи ржХрж░рзБржи", type="primary")
    with col4:
        show_all = st.button("рж╕ржм ржжрзЗржЦрзБржи", type="secondary")

    if search_button or show_all:
        try:
            with st.spinner("ржЕржирзБрж╕ржирзНржзрж╛ржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ..."):
                if search_button:
                    search_criteria = {
                        'ржХрзНрж░ржорж┐ржХ_ржиржВ': si_number,
                        'ржирж╛ржо': name,
                        'ржкрж┐рждрж╛рж░_ржирж╛ржо': fathers_name,
                        'ржорж╛рждрж╛рж░_ржирж╛ржо': mothers_name,
                        'ржкрзЗрж╢рж╛': occupation,
                        'ржарж┐ржХрж╛ржирж╛': address,
                        'ржЬржирзНржо_рждрж╛рж░рж┐ржЦ': date_of_birth
                    }
                    # Remove empty criteria
                    search_criteria = {k: v for k, v in search_criteria.items() if v}
                    results = db.search_records_advanced(search_criteria)
                else:
                    results = db.get_batch_records(None)

                if results:
                    st.success(f"{len(results)}ржЯрж┐ ржлрж▓рж╛ржлрж▓ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ")

                    # Initialize session state for edited data if not exists
                    if 'edited_data' not in st.session_state:
                        st.session_state.edited_data = None

                    # Convert results to DataFrame
                    df = pd.DataFrame(results)

                    # Create editable dataframe
                    edited_df = st.data_editor(
                        df[[
                            'ржХрзНрж░ржорж┐ржХ_ржиржВ', 'ржирж╛ржо', 'ржнрзЛржЯрж╛рж░_ржиржВ', 'ржкрж┐рждрж╛рж░_ржирж╛ржо',
                            'ржорж╛рждрж╛рж░_ржирж╛ржо', 'ржкрзЗрж╢рж╛', 'ржарж┐ржХрж╛ржирж╛', 'ржЬржирзНржо_рждрж╛рж░рж┐ржЦ', 'relationship_status'
                        ]],
                        column_config={
                            'ржХрзНрж░ржорж┐ржХ_ржиржВ': st.column_config.TextColumn('ржХрзНрж░ржорж┐ржХ ржиржВ'),
                            'ржирж╛ржо': st.column_config.TextColumn('ржирж╛ржо'),
                            'ржнрзЛржЯрж╛рж░_ржиржВ': st.column_config.TextColumn('ржнрзЛржЯрж╛рж░ ржиржВ'),
                            'ржкрж┐рждрж╛рж░_ржирж╛ржо': st.column_config.TextColumn('ржкрж┐рждрж╛рж░ ржирж╛ржо'),
                            'ржорж╛рждрж╛рж░_ржирж╛ржо': st.column_config.TextColumn('ржорж╛рждрж╛рж░ ржирж╛ржо'),
                            'ржкрзЗрж╢рж╛': st.column_config.TextColumn('ржкрзЗрж╢рж╛'),
                            'ржарж┐ржХрж╛ржирж╛': st.column_config.TextColumn('ржарж┐ржХрж╛ржирж╛'),
                            'ржЬржирзНржо_рждрж╛рж░рж┐ржЦ': st.column_config.TextColumn('ржЬржирзНржо рждрж╛рж░рж┐ржЦ'),
                            'relationship_status': st.column_config.SelectboxColumn(
                                'рж╕ржорзНржкрж░рзНржХрзЗрж░ ржзрж░ржг',
                                options=['Regular', 'Friend', 'Enemy'],
                                required=True,
                                default='Regular'
                            )
                        },
                        hide_index=True,
                        use_container_width=True,
                        key="search_data_editor",
                        disabled=False
                    )

                    st.session_state.edited_data = edited_df

                    # Update button
                    if st.button("ржкрж░рж┐ржмрж░рзНрждржиржЧрзБрж▓рж┐ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи", type="primary", key="save_changes"):
                        try:
                            changes = edited_df.compare(df[[
                                'ржХрзНрж░ржорж┐ржХ_ржиржВ', 'ржирж╛ржо', 'ржнрзЛржЯрж╛рж░_ржиржВ', 'ржкрж┐рждрж╛рж░_ржирж╛ржо',
                                'ржорж╛рждрж╛рж░_ржирж╛ржо', 'ржкрзЗрж╢рж╛', 'ржарж┐ржХрж╛ржирж╛', 'ржЬржирзНржо_рждрж╛рж░рж┐ржЦ', 'relationship_status'
                            ]])

                            if not changes.empty:
                                for idx in changes.index:
                                    record_id = int(df.iloc[idx]['id'])
                                    row_data = edited_df.iloc[idx]
                                    updated_data = {
                                        'ржХрзНрж░ржорж┐ржХ_ржиржВ': str(row_data['ржХрзНрж░ржорж┐ржХ_ржиржВ']) if pd.notnull(row_data['ржХрзНрж░ржорж┐ржХ_ржиржВ']) else '',
                                        'ржирж╛ржо': str(row_data['ржирж╛ржо']) if pd.notnull(row_data['ржирж╛ржо']) else '',
                                        'ржнрзЛржЯрж╛рж░_ржиржВ': str(row_data['ржнрзЛржЯрж╛рж░_ржиржВ']) if pd.notnull(row_data['ржнрзЛржЯрж╛рж░_ржиржВ']) else '',
                                        'ржкрж┐рждрж╛рж░_ржирж╛ржо': str(row_data['ржкрж┐рждрж╛рж░_ржирж╛ржо']) if pd.notnull(row_data['ржкрж┐рждрж╛рж░_ржирж╛ржо']) else '',
                                        'ржорж╛рждрж╛рж░_ржирж╛ржо': str(row_data['ржорж╛рждрж╛рж░_ржирж╛ржо']) if pd.notnull(row_data['ржорж╛рждрж╛рж░_ржирж╛ржо']) else '',
                                        'ржкрзЗрж╢рж╛': str(row_data['ржкрзЗрж╢рж╛']) if pd.notnull(row_data['ржкрзЗрж╢рж╛']) else '',
                                        'ржарж┐ржХрж╛ржирж╛': str(row_data['ржарж┐ржХрж╛ржирж╛']) if pd.notnull(row_data['ржарж┐ржХрж╛ржирж╛']) else '',
                                        'ржЬржирзНржо_рждрж╛рж░рж┐ржЦ': str(row_data['ржЬржирзНржо_рждрж╛рж░рж┐ржЦ']) if pd.notnull(row_data['ржЬржирзНржо_рждрж╛рж░рж┐ржЦ']) else '',
                                        'relationship_status': str(row_data['relationship_status']) if pd.notnull(row_data['relationship_status']) else 'Regular'
                                    }
                                    db.update_record(record_id, updated_data)

                                st.success("тЬЕ ржкрж░рж┐ржмрж░рзНрждржиржЧрзБрж▓рж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕ржВрж░ржХрзНрж╖рж┐ржд рж╣ржпрж╝рзЗржЫрзЗ!")
                                st.rerun()
                        except Exception as e:
                            logger.error(f"Update error: {str(e)}")
                            st.error(f"ржкрж░рж┐ржмрж░рзНрждржи рж╕ржВрж░ржХрзНрж╖ржгрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ: {str(e)}")

                else:
                    st.info("ржХрзЛржи ржлрж▓рж╛ржлрж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐")

        except Exception as e:
            logger.error(f"Search error: {str(e)}")
            st.error(f"ржЕржирзБрж╕ржирзНржзрж╛ржирзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ: {str(e)}")

if __name__ == "__main__":
    search_page()